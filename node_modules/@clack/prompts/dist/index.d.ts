export { isCancel } from '@clack/core';

interface TextOptions {
    message: string;
    placeholder?: string;
    defaultValue?: string;
    initialValue?: string;
    validate?: (value: string) => string | void;
}
declare const text: (opts: TextOptions) => Promise<string | symbol>;
interface ConfirmOptions {
    message: string;
    active?: string;
    inactive?: string;
    initialValue?: boolean;
}
declare const confirm: (opts: ConfirmOptions) => Promise<boolean | symbol>;
type Primitive = Readonly<string | boolean | number>;
interface Option<Value extends Primitive> {
    value: Value;
    label?: string;
    hint?: string;
}
interface SelectOptions<Options extends Option<Value>[], Value extends Primitive> {
    message: string;
    options: Options;
    initialValue?: Options[number]['value'];
}
interface MultiSelectOptions<Options extends Option<Value>[], Value extends Primitive> {
    message: string;
    options: Options;
    initialValue?: Options[number]['value'][];
    required?: boolean;
    cursorAt?: Options[number]['value'];
}
declare const select: <Options extends Option<Value>[], Value extends Primitive>(opts: SelectOptions<Options, Value>) => Promise<symbol | Options[number]["value"]>;
declare const multiselect: <Options extends Option<Value>[], Value extends Primitive>(opts: MultiSelectOptions<Options, Value>) => Promise<symbol | Options[number]["value"][]>;
declare const note: (message?: string, title?: string) => void;
declare const cancel: (message?: string) => void;
declare const intro: (title?: string) => void;
declare const outro: (message?: string) => void;
declare const spinner: () => {
    start(message?: string): void;
    stop(message?: string): void;
};
type PromptGroupAwaitedReturn<T> = {
    [P in keyof T]: Exclude<Awaited<T[P]>, symbol>;
};
interface PromptGroupOptions<T> {
    /**
     * Control how the group can be canceld
     * if one of the prompts is canceld.
     */
    onCancel?: (opts: {
        results: Partial<PromptGroupAwaitedReturn<T>>;
    }) => void;
}
type PromptGroup<T> = {
    [P in keyof T]: (opts: {
        results: Partial<PromptGroupAwaitedReturn<T>>;
    }) => Promise<T[P]>;
};
/**
 * Define a group of prompts to be displayed
 * and return a results of objects within the group
 */
declare const group: <T>(prompts: PromptGroup<T>, opts?: PromptGroupOptions<T> | undefined) => Promise<PromptGroupAwaitedReturn<T>>;

export { ConfirmOptions, MultiSelectOptions, PromptGroup, PromptGroupAwaitedReturn, PromptGroupOptions, SelectOptions, TextOptions, cancel, confirm, group, intro, multiselect, note, outro, select, spinner, text };
